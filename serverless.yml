

service: blog-server

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

  iamRoleStatements: # permissions for all of your functions can be set here
      - Effect: Allow
        Action: # Gives permission to DynamoDB tables in a specific region
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: "arn:aws:dynamodb:us-east-1:937408641398:table/Table"

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createFaq:
    handler: lambda-micro-services/dynamoDB/create.handler
    events:
      - http:
          path: dynamodb
          method: post
  getFaq: 
    handler: lambda-micro-services/dynamoDB/get.handler
    events: 
      - http:
          path: dynamodb
          method: get
  updateFaq: 
    handler: lambda-micro-services/dynamoDB/update.handler
    events: 
      - http:
          path: dynamodb
          method: put
  deleteFaq: 
    handler: lambda-micro-services/dynamoDB/delete.handler
    events: 
      - http: 
          path: dynamodb
          method: delete
  sendMail: 
    handler: lambda-micro-services/AWS-SES/send-mail.handler
    events: 
      - http: 
          path: send-email
          method: post
          response:
            headers:
              Content-Type: "text/json"
          cors:
            origins:
              - '*'

#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    BlogTable: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: Table
        AttributeDefinitions:
          - AttributeName: _id
            AttributeType: S
        KeySchema: 
          - AttributeName: _id
            KeyType: HASH
        ProvisionedThroughput: 
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
